package quiz0317;
public class quiz01 {

//	while문 사용[반복무한횟수]
//    int sum = 0; 합계를 저장할 변수 초기화
//    int i = 1; 반복문 제어 변수 초기화
//
//    while (i <= 100) { // 1부터 100까지 반복
//        if (i % 3 == 0 || i % 7 == 0) { // 3의 배수 또는 7의 배수인지 확인
//            if (i % (3 * 7) != 0) { // 3과 7의 공배수(21의 배수)는 제외
//                sum += i; // 조건에 맞는 정수를 누적하여 더함
//                System.out.print(i); // 현재 숫자 출력
//                if (i < 99) System.out.print("+"); // 마지막 숫자가 아니면 '+' 출력
//            }
//        }
//        i++; // 반복 변수 증가
//    }
//    System.out.println("=" + sum); // 최종 합 출력
//
//    // do~while문 사용
//    sum = 0; // 합계를 다시 0으로 초기화
//    i = 1; // 반복 변수 초기화
//    do { //무조건 실행하는 do 
//        if (i % 3 == 0 || i % 7 == 0) { // 3의 배수 또는 7의 배수인지 확인
//            if (i % (3 * 7) != 0) { // 3과 7의 공배수 제외
//                sum += i; // 조건에 맞는 정수를 누적하여 더함
//                System.out.print(i); // 현재 숫자 출력
//                if (i < 99) System.out.print("+"); // 마지막 숫자가 아니면 '+' 출력
//            }
//        }
//        i++; // 반복 변수 증가
//    } while (i <= 100); // While문 1부터 100까지 반복
//    System.out.println("=" + sum); // 최종 합 출력
//
//    // for문 반복 사용[반복 횟수가 정해져 있는 함수]
//    sum = 0; // 합계를 다시 0으로 초기화
//    for (int x = 1; x <= 100; x++) { // 1부터 100까지 반복
//        if (x % 3 == 0 || x % 7 == 0) { // 3의 배수 또는 7의 배수인지 확인
//            if (x % (3 * 7) != 0) { // 3과 7의 공배수 제외
//                sum += x; // 조건에 맞는 정수를 누적하여 더함
//                System.out.print(x); // 현재 숫자 출력
//                if (x < 99) System.out.print("+"); // 마지막 숫자가 아니면 '+' 출력
//            }
//        }
//    }
//    System.out.println("=" + sum); // 최종 합 출력
 public static void main(String[] args) {		
	
	// while문 사용[반복무한횟수]
	 
	int sum=0;     // 합계를 저장할 변수 초기화
	int i = 1;     // 반복문 제어 변수 초기화

	while(i<=100) {     // 1부터 100까지 반복
	    if(i%3==0||i%7==0) { // 3의 배수 또는 7의 배수인지 확인
	     if(i%(3*7)!=0){// 3과 7의 공배수(21의 배수)는 제외
	     sum+=i;// 조건에 맞는 정수를 누적하여 더함
	     System.out.println(i);// 현재 숫자 출력
	     if(i<100) System.out.println("+");// 마지막 숫자가 아니면 '+' 출력
	     }
	    }
	    i++;// 반복 변수 증가
	    System.out.println("="+sum);	// 최종 합 출력

	    // do~while문 사용
	 
	    // 합계를 다시 0으로 초기화
	    // 반복 변수 초기화
	    //무조건 실행하는 do 
	    // 3의 배수 또는 7의 배수인지 확인
	    // 3과 7의 공배수 제외
	    // 조건에 맞는 정수를 누적하여 더함
	    // 현재 숫자 출력
	    // 마지막 숫자가 아니면 '+' 출력
	    
	    
	    // 반복 변수 증가
	    // While문 1부터 100까지 반복
	    // 최종 합 출력

	    // for문 반복 사용[반복 횟수가 정해져 있는 함수]
	    // 합계를 다시 0으로 초기화
	    // 1부터 100까지 반복
	    // 3의 배수 또는 7의 배수인지 확인
	    // 3과 7의 공배수 제외
	    // 조건에 맞는 정수를 누적하여 더함
	    // 현재 숫자 출력
	    // 마지막 숫자가 아니면 '+' 출력
	    
	    
	    
	    // 최종 합 출력
}
}
	
	
	
	
	
	
	
	
	
	
	
//do~while
	
	
	
	
	
	
	
	
	
//for	
	











//	문제2) 다음과 같은 모양을 출력하는 프로그램을 while문으로 작성하시오.
//	파일명 : QuPyramid01.java
//	실행결과]
//	*
//	* *
//	* * *
//	* * * *
//	* * * * *



//	문제3) 다음과 같은 모양을 출력하는 프로그램을 do~while문으로 작성하시오.
//	파일명 : QuPyramid02.java
//	실행결과]
//	* * * * *
//	* * * *
//	* * *
//	* *
//	*



//	문제4) 다음과 같은 모양을 출력하는 프로그램을 for문으로 작성하시오.
//	파일명 : QuPyramid03.java
//	실행결과]
//	         *
//	       * * *
//	     * * * * *
//	   * * * * * * *
//	* * * * * * * * *



//	문제5) 다음과 같은 모양을 출력하는 프로그램을 for문으로 작성하시오.
//	파일명 : QuPyramid04.java
//	실행결과]
//	*
//	* *
//	* * *
//	* * * *
//	* * * * *
//	* * * * 
//	* * * 
//	* * 
//	* 





//	메서드
//	※ex05method 패키지에서 작성하세요.
//
//	문제1) 파일명 : QuSimpleOperation.java
//	두개의 정수를 입력받아서 사칙연산의 결과를 출력하는 메소드와 main메소드를 작성해보자. 단 나눗셈은 몫과 나머지를 각각 출력해야 한다.
//	인수(파라메타)로 전달되는 두 숫자는 모두 0 이상의 양의 정수이다.
//	메소드명 : arithmetic()
//
//
//	실행결과]
//	덧셈결과 -> 177
//	뺄셈결과 -> 23
//	곱셈결과 -> 7700
//	나눗셈 몫 -> 1
//	나눗셈 나머지 -> 23




//	문제2) 파일명 : QuCircleCalculator.java
//	원의 반지름을 인수(파라메타)로 전달하면 원의 넓이와 둘레를 계산하여 반환하는 메소드를 각각 정의하자. 이를 호출하는 main 메소드를 정의하시오.
//	메소드명 : circleArea() > 원의넓이, circleRound() > 원의둘레
//	-넓이공식 : 3.14 * 반지름 * 반지름
//	-둘레공식 : 2 * 3.14 * 반지름

//	실행결과]
//	원의 둘레(5.5) : 34.54
//	원의 넓이(5.5) : 94.985



//	문제3) 파일명 : QuTemperature.java
//	섭씨(Celsius)를 입력받아서 화씨(Fahrenheit)로 변환하여 리턴하는 함수와 화씨를 입력받아서 섭씨로 변환하여 리턴하는 함수를 만들어라. 공식은 아래와 같습니다 
//	메소드명 : celsiusToFahrenheit() , fahrenheitToCelsius()
//	공식]
//	화씨 = 1.8 * 섭씨 + 32
//	섭씨 = (화씨 - 32) / 1.8


//	문제4) 파일명 : QuFindPrimeNumber.java 
//	전달된 값이 소수인지 아닌지를 판단하여 소수인 경우 true를 아니면 false를 반환하는 메소드를 정의하고, 이를 이용해서 1부터 100사이의 소수를 전부 출력하는 main메소드를 정의하자.
//	메소드명 : isPrimeNumber()
//	소수란 : 특정 정수를 나눌수 있는것이 1과 자기 자신밖에 없는 수.
//
//
//	실행결과]
//	2
//	3
//	5
//	……중략……
//	97


//	문제5) 파일명 : QuFibonacci.java
//	피보나치 수열은 첫항이 0, 두번째항이 1로 구성되어 이전 2개의 항을 더해서 다음 항을 만들어낸다. 입력한 정수의 갯수만큼 항목을 출력하도록 프로그램을 작성하시오. 
//	메서드명 : fibonacciProgression()
//	형식]
//	첫번째 항 0 / 두번째항 1
//	세번째항 : 0 + 1 = 1
//	네번째항 : 1 + 1 = 2
//	다섯번째항 : 1 + 2 = 3
//
//
//	실행결과
//	숫자를 입력하세요 : 10
//	0, 1, 1, 2, 3, 5, 8, 13, 21, 34 


//	문제6) 파일명 : QuSymmetry.java
//	다음과 같은 회전대칭 모양의 출력결과를 보이는 프로그램을 while문과 for문으로 작성하시오.
//	단, 메서드로 작성해야 한다. 
//	메서드명 : rotationSymmetry()
//	0 0 0 1
//	0 0 1 0
//	0 1 0 0
//	1 0 0 0



//	1차원배열
//	※ex06array 패키지에서 작성하세요.
//	문제1) 파일명 : QuNumberCounter.java
//	다음에 주어진 answer 배열에는 1~4까지의 정수가 여러개 저장되어 있다. 배열 전체의 데이터를 읽어서 각 정수가 몇개씩 있는지 카운트하여 counter 배열에 순서대로 저장하시오.

//	샘플코드]
//	int[] answer = { 1,4,4,3,1,4,4,2,1,3,2  };
//	int[] counter = new int[4];


//	실행결과]
//	counter[0] => 3
//	counter[1] => 2
//	counter[2] => 2
//	counter[3] => 4



//	문제2) 파일명 : QuArray1To10.java
//	다음 절차에 따라 프로그램을 작성하시오.
//	1. 크기가 10인 정수타입의 배열을 선언한다.
//	2. 반복문을 이용하여 배열을 채운다. 
//	이때 배열은 1,2,3,4....순서대로 채운다.
//	3. 2번에서 채운 배열을 출력한다.
//	4. 위에서 채운 배열의 첫번째 값에서 마지막값까지 누적해서 더한다.
//	5. 누적해서 더한 값을 출력한다. 
//	실행결과]
//	초기화된 배열 요소
//	1 2 3 4 5 6 7 8 9 10 
//	배열전체요소의합:55




//	문제3) 홀수/짝수 구분하여 배열채우기
//	파일명 : QuFillArray.java
//	길이가 10인 배열을 선언한 후 총 10개의 정수를 입력받아 순서대로 저장한다. (첫번째배열)
//	그리고 순서대로 저장된 숫자들을 홀수는 배열의 앞에서부터 채워나가고 짝수는 배열의 끝에서부터 채워나간다.(두번째배열)
//
//	실행결과]
//	1번째 정수를 입력하세요:2
//	2번째 정수를 입력하세요:4
//	3번째 정수를 입력하세요:5
//	4번째 정수를 입력하세요:3
//	5번째 정수를 입력하세요:2
//	6번째 정수를 입력하세요:9
//	7번째 정수를 입력하세요:7
//	8번째 정수를 입력하세요:8
//	9번째 정수를 입력하세요:5
//	10번째 정수를 입력하세요:1
//	순서대로입력된결과
//	2 4 5 3 2 9 7 8 5 1 
//	홀수/짝수 구분입력결과
//	5 3 9 7 5 1 8 2 4 2 




//	스트링(String)
//	※ex07string 패키지에서 작성하세요.
//
//	문제1] 파일명 : QuValidateId.java
//	사용자로 부터 아이디를 입력받은 후 다음 조건에 만족하는지 확인할 수 있는 프로그램을 작성하시오.
//	아이디는 8~12자 사이로만 사용할 수 있다. (length() 메서드 활용)
//	영문과 숫자로만 입력할 수 있다. (charAt() 메서드 활용)
//	특수기호, 공백, 그 외 모든 문자는 입력할 수 없다. 
//	위 조건에 만족하면 true, 만족하지 않으면 false를 반환한다. 
//	메서드명 : boolean idValidate(String inputId)
//	힌트 : (idChar>='a' && idChar<='z') 이와 같은 조건을 사용하면 된당^^*
//	실행결과]
//	아이디를 입력하세요 : kosmo123
//	사용할 수 있는 아이디입니다. 
//
//	아이디를 입력하세요 : ko^smo 99
//	사용할 수 없습니다.






	 

	
}
